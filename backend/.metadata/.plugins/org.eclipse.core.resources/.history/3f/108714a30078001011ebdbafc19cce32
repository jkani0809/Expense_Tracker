package com.example.backend.controller;

import com.example.backend.model.User;
import com.example.backend.model.DashboardItem;
import com.example.backend.service.DataService;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.util.*;
import java.util.stream.Collectors;

@CrossOrigin(origins = "http://localhost:5173")
@RestController
@RequestMapping("/api")
public class ApiController {

    private final DataService dataService;

    public ApiController(DataService dataService) {
        this.dataService = dataService;
    }

    public List<Map<String, String>> getUsers() throws IOException {
        return dataService.getUsersFromDb().stream()
                .map(user -> Map.of(
                        "userid", user.getUserid(),
                        "username", user.getUsername(),
                        "email", user.getEmail(),
                        "createdAt", user.getCreatedAt()
                ))
                .collect(Collectors.toList());
    }


    @PostMapping("/users")
    public ResponseEntity<User> createUser(@RequestBody User newUser) throws IOException {
        List<User> users = dataService.getUsersFromDb();
        newUser.setUserid(UUID.randomUUID().toString());
        newUser.setCreatedAt(new Date().toString());
        users.add(newUser);
        dataService.saveUsersToDb(users);
        return ResponseEntity.status(HttpStatus.CREATED).body(newUser);
    }

    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody Map<String, String> credentials) throws IOException {
        String username = credentials.get("username");
        String password = credentials.get("password");

        return dataService.getUsersFromDb().stream()
                .filter(u -> u.getUsername().equals(username) && u.getPassword().equals(password))
                .findFirst()
                .map(user -> ResponseEntity.ok(Map.of(
                        "userid", user.getUserid(),
                        "username", user.getUsername(),
                        "email", user.getEmail()
                )))
                .orElse(ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid credentials"));
    }

    // ===== DETAILS =====
    @GetMapping("/details")
    public List<DashboardItem> getDetails() throws IOException {
        return dataService.getDetailsFromDb();
    }

    @PostMapping("/details")
    public ResponseEntity<DashboardItem> addDetail(@RequestBody DashboardItem newItem) throws IOException {
        List<DashboardItem> details = dataService.getDetailsFromDb();
        newItem.setId(UUID.randomUUID().toString());
        newItem.setDate(new Date().toString());
        details.add(newItem);
        dataService.saveDetailsToDb(details);
        return ResponseEntity.status(HttpStatus.CREATED).body(newItem);
    }

    @PutMapping("/details/{id}")
    public ResponseEntity<DashboardItem> updateDetail(@PathVariable String id, @RequestBody DashboardItem updatedItem) throws IOException {
        List<DashboardItem> details = dataService.getDetailsFromDb();
        for (int i = 0; i < details.size(); i++) {
            if (details.get(i).getId().equals(id)) {
                updatedItem.setId(id);
                details.set(i, updatedItem);
                dataService.saveDetailsToDb(details);
                return ResponseEntity.ok(updatedItem);
            }
        }
        return ResponseEntity.notFound().build();
    }

    @DeleteMapping("/details/{id}")
    public ResponseEntity<Void> deleteDetail(@PathVariable String id) throws IOException {
        List<DashboardItem> details = dataService.getDetailsFromDb();
        boolean removed = details.removeIf(d -> d.getId().equals(id));
        if (removed) {
            dataService.saveDetailsToDb(details);
            return ResponseEntity.noContent().build();
        }
        return ResponseEntity.notFound().build();
    }
}
