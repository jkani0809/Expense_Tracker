package com.example.backend.controller;

import com.example.backend.model.User;
import com.example.backend.service.DataService;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.io.IOException;
import java.util.*;

@RestController
@RequestMapping("/api")
public class ApiController {
    private final DataService dataService;

    public ApiController(DataService dataService) {
        this.dataService = dataService;
    }

    @GetMapping("/users")
    public List<User> users() throws IOException {
        return dataService.getUsersFromDb();
    }

    @GetMapping("/details")
    public List<User> details() throws IOException {
        return dataService.getUsersFromDetails();
    }

    @GetMapping("/merged-users")
    public List<User> mergedUsers() throws IOException {
        List<User> dbUsers = dataService.getUsersFromDb();
        List<User> detailUsers = dataService.getUsersFromDetails();

        Map<String, User> map = new LinkedHashMap<>();
        // put db users first
        for (User u : dbUsers) {
            map.put(u.getUserid(), u);
        }
        // for detail users, attach dashboard if same userid or add new user
        for (User du : detailUsers) {
            if (map.containsKey(du.getUserid())) {
                User existing = map.get(du.getUserid());
                existing.setDashboard(du.getDashboard());
            } else {
                map.put(du.getUserid(), du);
            }
        }
        return new ArrayList<>(map.values());
    }
}
